import {
	Commands,
	InitialBot,
	Stickers,
	Subdivision,
	–°ourses,
} from '../../Config/enums'
import { ExcelController } from '../../Controller/ExcelController/ExcelController'
import { ScheduleUrlController } from '../../Controller/ScheduleUrlController/ScheduleUrlController'
import { ColumnHelper } from '../../Helpers/ColumnHelper/ColumnHelper'
import { GroupNameHelper } from '../../Helpers/GroupNameHelper/GroupNameHelper'
import { ScheduleMessageHelper } from '../../Helpers/ScheduleMessageHelper/ScheduleMessageHelper'
import { scheduleKeyboard, startKeyboard, startKeyboardAdmin } from './Buttons'
import {
	IGetScheduleInfo,
	IUser,
	Message,
	TelegramApi,
} from '../../Types/types'

class BotResponse {
	private getScheduleInfo = { urlSchedule: '' } as IGetScheduleInfo

	async start(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id

		const userInfo = {} as IUser

		// if (!user) {
		// 	if (msg.from?.first_name) {
		// 		userInfo.tgId = msg.from?.first_name
		// 	}

		// 	userInfo.chatId = msg.chat.id
		// }

		// userInfo.

		const sticker = Stickers.—Åute

		// const message = `–ü—Ä–∏–≤–µ—Ç, ${userName} üëã\n\n–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π 015-–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "${Commands.getSchedule}"`
		const message = `–ü—Ä–∏–≤–µ—Ç"`

		await bot.sendSticker(chatId, sticker)

		await bot.sendMessage(chatId, message, {
			...startKeyboard,
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		})
	}

	async getSchedule(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id

		// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
		// const target = {
		// 	chat_id: chatId,
		// 	tg_id: msg.chat.username,
		// 	name: msg.chat.first_name,
		// } as IUser

		const userId = msg.chat.id

		const messages = {
			loading_request: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚è≥',
			response_formation: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ‚è≥',
			responses: [],
		}

		const { message_id } = await bot.sendMessage(
			chatId,
			messages.loading_request,
		)

		const urlToFileSchedule = await ScheduleUrlController.getUrl(
			Subdivision.SP4,
		)

		const isSimilarUrls = this.getScheduleInfo.urlSchedule === urlToFileSchedule

		const isStringUrl = urlToFileSchedule !== undefined

		//–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ –±–æ—Ç—É –≤—Å–µ–¥–∞ —Å–∫–∞—á–∏–≤–∞–µ–º Excel —Ñ–∞–π–ª
		if (!this.getScheduleInfo.urlSchedule && isStringUrl) {
			this.getScheduleInfo.urlSchedule = urlToFileSchedule
			var pathToFileSchedule = await ExcelController.getExcel(urlToFileSchedule)
		}
		// –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —É –Ω–∞—Å —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª —Å –∂—É—Ä–Ω–∞–ª–æ–º
		else if (isSimilarUrls) {
			this.getScheduleInfo.urlSchedule = urlToFileSchedule
			var pathToFileSchedule: string | boolean =
				ExcelController.getPathToSchedule()
		}
		// –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –±—ã–ª–æ - –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª –Ω–∞ –Ω–æ–≤—ã–π
		else {
			var pathToFileSchedule = await ExcelController.getExcel(urlToFileSchedule)
		}

		if (!pathToFileSchedule) {
			throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –∂—É—Ä–Ω–∞–ª–∞')
		}

		const defaultGroup = '015'

		const group = GroupNameHelper(defaultGroup)
		const course = –°ourses.third

		const search = {
			course,
			group,
		}

		const content = await ExcelController.getColumn(
			pathToFileSchedule,
			search.course,
			search.group,
		)

		await bot.editMessageText(messages.response_formation, {
			message_id,
			chat_id: chatId,
		})

		const formatContent = ColumnHelper(content)

		let messageInfo = `<b>–ì—Ä—É–ø–ø–∞:</b> ${defaultGroup}.\n<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> ${formatContent.nameGroup}.`

		await bot.editMessageText(messageInfo, {
			message_id,
			chat_id: chatId,
			parse_mode: 'HTML',
		})

		let messageSchedule = ScheduleMessageHelper(formatContent)

		await bot.sendMessage(chatId, messageSchedule, {
			...scheduleKeyboard,
			parse_mode: 'HTML',
		})
	}

	async error(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id

		const sticker = Stickers.panic
		const message = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...'

		await bot.sendSticker(chatId, sticker)
		await bot.sendMessage(chatId, message, startKeyboard)
	}

	async notFound(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id
		const message = '–ü–æ—Ö–æ–∂–µ —á—Ç–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π.'

		await bot.sendMessage(chatId, message)
	}

	async home(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id
		const message = '–ú–µ–Ω—é'

		// if (chatId === InitialBot.admin) {
		// 	await bot.sendMessage(chatId, message, startKeyboardAdmin)
		// 	return
		// }

		await bot.sendMessage(chatId, message, startKeyboard)
	}

	async getStatistics(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id

		// const message = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>${users}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: <b>${quantityUsage}</b>`

		// await bot.sendMessage(chatId, message, {
		// 	...startKeyboardAdmin,
		// 	parse_mode: 'HTML',
		// })
	}

	async getInfo(bot: TelegramApi, msg: Message) {
		const chatId = msg.chat.id
		const message =
			'–ë–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üëâ <a href="https://github.com/ManucherKM/schedule_bot">—Ç—É—Ç</a>'

		await bot.sendMessage(chatId, message, {
			...startKeyboard,
			parse_mode: 'HTML',
			disable_web_page_preview: true,
		})
	}

	// async profile(bot: TelegramApi, msg: Message) {
	// 	const chatId = msg.chat.id
	// 	const message = '–ü—Ä–æ—Ñ–∏–ª—å'

	// 	await bot.sendMessage(chatId, message)
	// }
}

export const BotResponseService = new BotResponse()
