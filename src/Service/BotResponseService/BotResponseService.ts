import {
  ScheduleMessageHelper,
  scheduleKeyboard,
  ExcelController,
  GroupNameHelper,
  startKeyboard,
  ColumnHelper,
  TelegramApi,
  Commands,
  Message,
  –°ourses,
  Stickers,
} from "./index";

class BotResponse {
  async start(bot: TelegramApi, msg: Message) {
    const chatId = msg.chat.id;
    const userName = msg.from?.first_name;

    const sticker = Stickers.—Åute;

    const message = `–ü—Ä–∏–≤–µ—Ç, ${userName} üëã\n\n–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π 015-–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "${Commands.getSchedule}"\n\n–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <a href="https://github.com/ManucherKM/schedule_bot">—Ç—É—Ç</a>`;

    await bot.sendSticker(chatId, sticker);
    await bot.sendMessage(chatId, message, {
      ...startKeyboard,
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
  }

  async getSchedule(bot: TelegramApi, msg: Message) {
    const chatId = msg.chat.id;

    const messages = {
      loading_request: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚è≥",
      response_formation: "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ‚è≥",
      responses: [],
    };

    const { message_id } = await bot.sendMessage(
      chatId,
      messages.loading_request
    );

    const urlToFileSchedule = process.env.URL_SCHEDULE;

    const pathToFileSchedule = await ExcelController.getExcel(
      urlToFileSchedule
    );

    if (!pathToFileSchedule) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –∂—É—Ä–Ω–∞–ª–∞");
    }

    const group = GroupNameHelper("015");
    const course = –°ourses.third;

    const search = {
      course,
      group,
    };

    const content = await ExcelController.getColumn(
      pathToFileSchedule,
      search.course,
      search.group
    );

    await bot.editMessageText(messages.response_formation, {
      message_id,
      chat_id: chatId,
    });

    const formatContent = ColumnHelper(content);

    let messageInfo = `<b>–ì—Ä—É–ø–ø–∞:</b> ${formatContent.group}.\n<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> ${formatContent.nameGroup}.`;

    await bot.editMessageText(messageInfo, {
      message_id,
      chat_id: chatId,
      parse_mode: "HTML",
    });

    let messageSchedule = ScheduleMessageHelper(formatContent);

    await bot.sendMessage(chatId, messageSchedule, {
      ...scheduleKeyboard,
      parse_mode: "HTML",
    });

    const isFileRemoved = await ExcelController.removeExcel(pathToFileSchedule);

    if (!isFileRemoved) {
      console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å –∂—É—Ä–Ω–∞–ª–æ–º");
    }
  }

  async error(bot: TelegramApi, msg: Message) {
    const chatId = msg.chat.id;

    const sticker = Stickers.panic;
    const message = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...";

    await bot.sendSticker(chatId, sticker);
    await bot.sendMessage(chatId, message, startKeyboard);
  }

  async profile(bot: TelegramApi, msg: Message) {
    const chatId = msg.chat.id;
    const message = "–ü—Ä–æ—Ñ–∏–ª—å";

    await bot.sendMessage(chatId, message);
  }

  async notFound(bot: TelegramApi, msg: Message) {
    const chatId = msg.chat.id;
    const message = "–ü–æ—Ö–æ–∂–µ —á—Ç–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π.";

    await bot.sendMessage(chatId, message);
  }

  async home(bot: TelegramApi, msg: Message) {
    const chatId = msg.chat.id;
    const message = "–ú–µ–Ω—é";

    await bot.sendMessage(chatId, message, startKeyboard);
  }
}

export const BotResponseService = new BotResponse();
